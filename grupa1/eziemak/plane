#include<iostream>
#include<math.h>

using namespace std;

class Point
{
    double x, y, z;
    friend ostream& operator<<(ostream &o, Point p);

public:
    Point() {}
    Point(double _x, double _y, double _z)
    {
        setX(_x);
        setY(_y);
        setZ(_z);
    }

    ~Point() {}

    void setX(double _x) {x = _x;}  // ...
    void setY(double _y) {y = _y;}  // ...
    void setZ(double _z) {z = _z;}  // ...

    double getX() {return x;}  // ...
    double getY() {return y;}  // ...
    double getZ() {return z;}  // ...

    double distanceTo(Point p) {

        return sqrt(pow((p.getX()-x), 2) + pow((p.getY()-y), 2) + pow((p.getZ()-z), 2)); // ...
    }

    friend istream& operator>>(istream&, Point&);
};

ostream& operator<<(ostream &o, Point p)
{
    o << "[" << p.getX() << ", "<< p.getY() << ", " << p.getZ() << "]"; // ...
    return o;
}

istream& operator>>(istream &i, Point &p)
{
    i >> p.x; // ...
    i >> p.y;
    i >> p.z;

    return i;
}


double area(Point a, Point b, Point c)
{
    double ab = a.distanceTo(b);
    double bc = b.distanceTo(c);
    double ac = a.distanceTo(c);

    double p = (ab + bc + ac) / 2.0;

    return sqrt(p * (p - ab) * (p - ac) * (p - bc)); // wzór Herona
}

class Plane {

    Point a, b, c;
    friend ostream& operator<<(ostream &o, Plane p) {
        o<<"A = "<< p.a <<"; B = "<< p.b <<"; C = "<< p.c <<endl;
        return o;
    }

public:
	Plane(Point A, Point B, Point C) {
	a = A;
	b = B;
	c = C;
	}

	Plane* moveTo(Point P);  // przesunięcie płaszczyzny tak, aby zawierała punkt P
	double distanceFrom(Point P); // dystans
	int parallelTo(Plane &P); // czy płaszczyzna jest równoległa do płaszczyzny P
};

Plane* Plane::moveTo(Point P) {

    double v[] = {P.getX() - a.getX(), P.getY() - a.getY(), P.getZ() - a.getZ()}; // wektor przesunięcia

    a.setX(a.getX() + v[0]);
    a.setY(a.getY() + v[1]);
    a.setZ(a.getZ() + v[2]);

    b.setX(b.getX() + v[0]);
    b.setY(b.getY() + v[1]);
    b.setZ(b.getZ() + v[2]);

    c.setX(c.getX() + v[0]);
    c.setY(c.getY() + v[1]);
    c.setZ(c.getZ() + v[2]);

    return this;

}

double Plane::distanceFrom(Point P) {

    double ab[] = {b.getX() - a.getX(), b.getY() - a.getY(), b.getZ() - a.getZ()};
    double ac[] = {c.getX() - a.getX(), c.getY() - a.getY(), c.getZ() - a.getZ()};

    double v[3];

    v[0] = ab[1]*ac[2] - ab[2]*ac[1];
    v[1] = -(ab[0]*ac[2] - ab[2]*ac[0]);
    v[2] = ab[0]*ac[1] - ab[1]*ac[0];

    double d = -(v[0]*a.getX() + v[1]*a.getY() + v[2]*a.getZ());

    double odl = fabs(v[0]*P.getX() + v[1]*P.getY() + v[2]*P.getZ() + d) / sqrt(pow(v[0], 2) + pow(v[1], 2) + pow(v[2], 2));

    return odl;

}

int Plane::parallelTo(Plane &P) {

    double ab1[] = {b.getX() - a.getX(), b.getY() - a.getY(), b.getZ() - a.getZ()};
    double ac1[] = {c.getX() - a.getX(), c.getY() - a.getY(), c.getZ() - a.getZ()};

    double v1[3], v2[3];

    v1[0] = ab1[1]*ac1[2] - ab1[2]*ac1[1];
    v1[1] = -(ab1[0]*ac1[2] - ab1[2]*ac1[0]);
    v1[2] = ab1[0]*ac1[1] - ab1[1]*ac1[0];

    double ab2[] = {P.b.getX() - P.a.getX(), P.b.getY() - P.a.getY(), P.b.getZ() - P.a.getZ()};
    double ac2[] = {P.c.getX() - P.a.getX(), P.c.getY() - P.a.getY(), P.c.getZ() - P.a.getZ()};

    v2[0] = ab2[1]*ac2[2] - ab2[2]*ac2[1];
    v2[1] = -(ab2[0]*ac2[2] - ab2[2]*ac2[0]);
    v2[2] = ab2[0]*ac2[1] - ab2[1]*ac2[0];

    double d1 = -(v1[0]*a.getX() + v1[1]*a.getY() + v1[2]*a.getZ());
    double d2 = -(v2[0]*P.a.getX() + v2[1]*P.a.getY() + v2[2]*P.a.getZ());

    if((v1[0]/v2[0] == v1[1]/v2[1]) && (v1[0]/v2[0] == v1[2]/v2[2]) && (v1[0]/v2[0] == d1/d2)) {return 2;}
        else {if((v1[0]/v2[0] == v1[1]/v2[1]) && (v1[0]/v2[0] == v1[2]/v2[2])) {return 1;}
                                                                                 else {return 0;}}

}

int main()
{
    Point p;
    Point q;
    Point r;

    cout << "Podaj wspolrzedne punktu p: ";
    cin >> p;
    cout << "Podaj wspolrzedne punktu q: ";
    cin >> q;
    cout << "Podaj wspolrzedne punktu r: ";
    cin >> r;

    cout << "Punkty: " << p << " " << q << " " << r << endl;
    cout << "Pole: " << area(p,q,r) << endl;

    Point a(2, 3, 1);
    Point b(1, 2, 5);
    Point c(2, 2, 6); // dla c(2, 2, 7) punkt (3, 3, 3) należy do plaszczyzny pi (czyli po przesunieciu do punktu, otrzymamy pokrywajace sie plaszczyzny)

    Plane pi(a, b, c);

    Point d(3, 3, 3);

    cout << "Plaszczyzna pi jest okreslona przez punkty " << endl << pi << endl;

    cout << "Dystans plaszczyzny pi od punktu D"<< d <<" wynosi: " << pi.distanceFrom(d) << endl << endl;

    Plane pi2 = pi;
    pi2.moveTo(d);

    cout << "Plaszczyzna pi przesunieta do punktu D"<< d <<" okreslona jest przez punkty:" << endl << pi2 << endl;

    cout << "Czy plaszczyzna pi jest rownolegla do pi2" << endl <<"(plaszczyzny pi przesunietej do punktu D) [0 = nie, 1 = tak, 2 = plaszczyzny sie pokrywaja] = " << pi.parallelTo(pi2)<< endl; // te płaszczyzny zawsze będą prostopadłe

    return 0;


}
