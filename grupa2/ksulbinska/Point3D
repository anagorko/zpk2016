#include<iostream>
#include<math.h>
using namespace std;

class Point
{
	double x, y, z;
public:
	Point() {}
	Point(double _x, double _y, double _z)
	{
		x = _x;
		y = _y;
		z = _z;
	}

	~Point() {}

	void setX(double _x) { x = _x;  }  // zmiana wsp x
	void setY(double _y) { y = _y; }  // zmiana wsp y
	void setZ(double _z) { z = _z; }  // zmiana wsp z

	double getX() { return x; }  // zwraca wsp x
	double getY() { return y; }  // zwraca wsp y
	double getZ() { return z; }  // zwraca wsp z

	double distanceTo(Point p) {
		return sqrt((x - p.x)*(x - p.x) + (y - p.y)*(y - p.y) + (z - p.z)*(z - p.z));
	}

	friend istream& operator>>(istream&, Point&);
};

ostream& operator<<(ostream &o, Point p)
{
	o << "(" << p.getX() << "," << p.getY() << "," << p.getZ() << ")" << endl;

	return o;
}

istream& operator>>(istream &i, Point &p)
{
	cout << "Podaj wspolrzedna x: ";
	i >> p.x;
	cout << "Podaj wspolrzedna y: ";
	i >> p.y;
	cout << "Podaj wspolrzedna z: ";
	i >> p.z;

	return i;
}


double area(Point a, Point b, Point c)
{
	double ab = a.distanceTo(b);
	double bc = b.distanceTo(c);
	double ac = a.distanceTo(c);

	double p = (ab + bc + ac) / 2.0;

	return sqrt(p * (p - ab) * (p - ac) * (p - bc)); // wz√≥r Herona
}

int main()
{
	//Point px(1.0, 2.0, 3.0);
	//Point pz(1.0, 2.0, 5.0);
  //cout << px.distanceTo(pz) << endl;
  
	Point p;
	Point q;
	Point r;
	
	cout << "Podaj wspolrzedne punktu p: ";
	cin >> p;
	cout << "Podaj wspolrzedne punktu q: ";
	cin >> q;
	cout << "Podaj wspolrzedne punktu r: ";
	cin >> r;

	cout << "Punkty: " << p << " " << q << " " << r << endl;
	cout << "Pole: " << area(p, q, r) << endl;

	return 0;
}
